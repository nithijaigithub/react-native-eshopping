{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"theme\", \"disabled\", \"onPress\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getAndroidSelectionControlColor } from \"./utils\";\nvar ANIMATION_DURATION = 100;\nvar CheckboxAndroid = function CheckboxAndroid(_ref) {\n  var status = _ref.status,\n    themeOverrides = _ref.theme,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _React$useRef = React.useRef(new Animated.Value(1)),\n    scaleAnim = _React$useRef.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    var checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var _getAndroidSelectionC = getAndroidSelectionControlColor({\n      theme: theme,\n      disabled: disabled,\n      checked: checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor\n    }),\n    rippleColor = _getAndroidSelectionC.rippleColor,\n    selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n  var borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID,\n    theme: theme\n  }), React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: selectionControlColor,\n    direction: \"ltr\"\n  }), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: selectionControlColor\n    }, {\n      borderWidth: borderWidth\n    }]\n  }))));\n};\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default CheckboxAndroid;\nexport { CheckboxAndroid };","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","MaterialCommunityIcon","TouchableRipple","getAndroidSelectionControlColor","ANIMATION_DURATION","CheckboxAndroid","_ref","status","themeOverrides","theme","disabled","onPress","testID","rest","useRef","Animated","Value","scaleAnim","current","isFirstRendering","scale","animation","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","customColor","color","customUncheckedColor","uncheckedColor","rippleColor","selectionControlColor","borderWidth","interpolate","inputRange","outputRange","icon","borderless","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","transform","allowFontScaling","name","size","direction","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"sourceRoot":"../../src","sources":["CheckboxAndroid.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}