{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../../core/theming\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { ICON_SIZE } from \"../constants\";\nimport { getConstants } from \"../helpers\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID,\n    themeOverrides = _ref.theme;\n  var _useInternalTheme = useInternalTheme(themeOverrides),\n    isV3 = _useInternalTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    color = _ref2.color,\n    themeOverrides = _ref2.theme,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID;\n  var onPressWithFocusControl = React.useCallback(function (e) {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useInternalTheme(themeOverrides);\n  var iconColor = color;\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID,\n    theme: themeOverrides\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\nexport { IconAdornment };","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","IconButton","ICON_SIZE","getConstants","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","_ref","icon","topPosition","side","themeOverrides","theme","isV3","ICON_OFFSET","top","contextState","Provider","value","TextInputIcon","_ref2","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","e","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","View","styles","container","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sourceRoot":"../../src","sources":["TextInputIcon.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}