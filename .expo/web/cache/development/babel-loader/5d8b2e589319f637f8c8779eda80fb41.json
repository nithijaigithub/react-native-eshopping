{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { getSwitchColor } from \"./utils\";\nvar version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n    disabled = _ref.disabled,\n    onValueChange = _ref.onValueChange,\n    color = _ref.color,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _getSwitchColor = getSwitchColor({\n      theme: theme,\n      disabled: disabled,\n      value: value,\n      color: color\n    }),\n    checkedColor = _getSwitchColor.checkedColor,\n    onTintColor = _getSwitchColor.onTintColor,\n    thumbTintColor = _getSwitchColor.thumbTintColor;\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nexport default Switch;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAAA;AAS9B,SAASC,gBAAgB;AAEzB,SAASC,cAAc;AAEvB,IAAMC,OAAO,GAAGC,aAAa,CAACC,iBAAiB,GAC3CD,aAAa,CAACC,iBAAiB,CAACC,kBAAkB,GAClDC,SAAS;AAgEb,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAGC,MAOF;EAAA,IANXC,KAAK,GAMCD,KANNC,KAAK;IACLC,QAAQ,GAKFF,KALNE,QAAQ;IACRC,aAAa,GAIPH,KAJNG,aAAa;IACbC,KAAK,GAGCJ,KAHNI,KAAK;IACEC,cAAc,GAEfL,KAFNM,KAAK;IACFC,gCACGP;EACN,IAAMM,KAAK,GAAGd,gBAAgB,CAACa,cAAc,CAAC;EAC9C,sBAAsDZ,cAAc,CAAC;MACnEa,KAAK,EAALA,KAAK;MACLJ,QAAQ,EAARA,QAAQ;MACRD,KAAK,EAALA,KAAK;MACLG;IACF,CAAC,CAAC;IALMI,YAAY,mBAAZA,YAAY;IAAEC,WAAW,mBAAXA,WAAW;IAAEC;EAOnC,IAAMC,KAAK,GACTjB,OAAO,IAAIA,OAAO,CAACkB,KAAK,KAAK,CAAC,IAAIlB,OAAO,CAACmB,KAAK,IAAI,EAAE,GACjD;IACEJ,WAAW,EAAXA,WAAW;IACXC;EACF,CAAC,GACDI,QAAQ,CAACC,EAAE,KAAK,KAAK,GACrB;IACEC,gBAAgB,EAAEP,WAAW;IAC7BQ,UAAU,EAAEP,cAAc;IAC1BQ,gBAAgB,EAAEV;EACpB,CAAC,GACD;IACES,UAAU,EAAEP,cAAc;IAC1BS,UAAU,EAAE;MACVC,IAAI,EAAEX,WAAW;MACjBY,KAAK,EAAEZ;IACT;EACF,CAAC;EAEP,OACElB,oBAAC+B,YAAY;IACXrB,KAAK,EAAEA,KAAM;IACbC,QAAQ,EAAEA,QAAS;IACnBC,aAAa,EAAED,QAAQ,GAAGJ,SAAS,GAAGK;EAAc,GAChDQ,KAAK,EACLJ,IAAI,EACR;AAEN,CAAC;AAED,eAAeR,MAAM","names":["React","useInternalTheme","getSwitchColor","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","_ref","value","disabled","onValueChange","color","themeOverrides","theme","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","NativeSwitch"],"sourceRoot":"../../src","sources":["Switch.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}