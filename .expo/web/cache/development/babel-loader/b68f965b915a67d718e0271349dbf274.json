{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { getAndroidSelectionControlColor } from \"../Checkbox/utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar BORDER_WIDTH = 2;\nvar RadioButtonAndroid = function RadioButtonAndroid(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    themeOverrides = _ref.theme,\n    value = _ref.value,\n    status = _ref.status,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var _React$useRef = React.useRef(new Animated.Value(BORDER_WIDTH)),\n    borderAnim = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(1)),\n    radioAnim = _React$useRef2.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    var _getAndroidSelectionC = getAndroidSelectionControlColor({\n        theme: theme,\n        disabled: disabled,\n        checked: checked,\n        customColor: rest.color,\n        customUncheckedColor: rest.uncheckedColor\n      }),\n      rippleColor = _getAndroidSelectionC.rippleColor,\n      selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID,\n      theme: theme\n    }), React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: selectionControlColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: selectionControlColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default RadioButtonAndroid;\nexport { RadioButtonAndroid };","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","getAndroidSelectionControlColor","TouchableRipple","RadioButtonContext","handlePress","isChecked","BORDER_WIDTH","RadioButtonAndroid","_ref","disabled","onPress","themeOverrides","theme","value","status","testID","rest","useRef","Animated","Value","borderAnim","current","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","Consumer","context","checked","contextValue","customColor","color","customUncheckedColor","uncheckedColor","rippleColor","selectionControlColor","borderless","undefined","event","onValueChange","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"sourceRoot":"../../src","sources":["RadioButtonAndroid.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}