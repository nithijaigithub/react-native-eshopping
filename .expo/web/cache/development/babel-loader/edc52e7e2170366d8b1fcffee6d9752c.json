{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/themes/v2/colors\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport IconButton from \"../IconButton/IconButton\";\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { getToggleButtonColor } from \"./utils\";\nvar ToggleButton = forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    themeOverrides = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = getToggleButtonColor({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style],\n      ref: ref,\n      theme: theme\n    }, rest));\n  });\n});\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default ToggleButton;\nexport { ToggleButton };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAU9B,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,gBAAgB;AACzB,SAASC,KAAK,EAAEC,KAAK;AAErB,SAASC,UAAU;AAEnB,OAAOC,UAAU;AACjB,SAASC,wBAAwB;AACjC,SAASC,oBAAoB;AAiF7B,IAAMC,YAAY,GAAGJ,UAAU,CAC7B,gBAaEK,GAAG,EACA;EAAA,IAZDC,IAAI,GAUEC,KAVND,IAAI;IACJE,IAAI,GASED,KATNC,IAAI;IACGC,cAAc,GAQfF,KARNG,KAAK;IACLC,kBAAkB,GAOZJ,KAPNI,kBAAkB;IAClBC,QAAQ,GAMFL,KANNK,QAAQ;IACRC,KAAK,GAKCN,KALNM,KAAK;IACLC,KAAK,GAICP,KAJNO,KAAK;IACLC,MAAM,GAGAR,KAHNQ,MAAM;IACNC,QAAO,GAEDT,KAFNS,OAAO;IACJC,gCACGV;EAGR,IAAMG,KAAK,GAAGb,gBAAgB,CAACY,cAAc,CAAC;EAC9C,IAAMS,YAAY,GAAGR,KAAK,CAACS,SAAS;EAEpC,OACExB,oBAACO,wBAAwB,CAACkB,QAAQ,QAE9BC,iBAAiE,EAC9D;IACH,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACP,KAAK,KAAKA,KAAK,IAAKC,MAAM,KAAK,SAAS;IAE9D,IAAMQ,eAAe,GAAGpB,oBAAoB,CAAC;MAAEO,KAAK,EAALA,KAAK;MAAEY;IAAQ,CAAC,CAAC;IAChE,IAAME,WAAW,GAAGd,KAAK,CAACe,IAAI,GAC1Bf,KAAK,CAACgB,MAAM,CAACC,OAAO,GACpB/B,KAAK,CAACc,KAAK,CAACkB,IAAI,GAAG7B,KAAK,GAAGD,KAAK,CAAC,CAC9B+B,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE;IAEf,OACEpC,oBAACM,UAAU;MACT+B,UAAU,EAAE,KAAM;MAClB1B,IAAI,EAAEA,IAAK;MACXU,OAAO,EAAGiB,kBAAkC,EAAK;QAC/C,IAAIjB,QAAO,EAAE;UACXA,QAAO,CAACiB,CAAC,CAAC;QACZ;QAEA,IAAIZ,OAAO,EAAE;UACXA,OAAO,CAACa,aAAa,CAAC,CAACZ,OAAO,GAAGR,KAAK,GAAG,IAAI,CAAC;QAChD;MACF,CAAE;MACFN,IAAI,EAAEA,IAAK;MACXG,kBAAkB,EAAEA,kBAAmB;MACvCwB,kBAAkB,EAAE;QAAEvB,QAAQ,EAARA,QAAQ;QAAEwB,QAAQ,EAAEd;MAAQ,CAAE;MACpDV,QAAQ,EAAEA,QAAS;MACnBC,KAAK,EAAE,CACLwB,MAAM,CAACC,OAAO,EACd;QACEf,eAAe,EAAfA,eAAe;QACfL,YAAY,EAAZA,YAAY;QACZM;MACF,CAAC,EACDX,KAAK,CACL;MACFR,GAAG,EAAEA,GAAI;MACTK,KAAK,EAAEA;IAAM,GACTO,IAAI,EACR;EAEN,CAAC,CACiC;AAExC,CAAC,CACF;AAED,IAAMoB,MAAM,GAAGE,UAAU,CAACC,MAAM,CAAC;EAC/BF,OAAO,EAAE;IACPG,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,eAAevC,YAAY;AAG3B,SAASA,YAAY","names":["React","color","useInternalTheme","black","white","forwardRef","IconButton","ToggleButtonGroupContext","getToggleButtonColor","ToggleButton","ref","icon","_ref","size","themeOverrides","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","Consumer","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","borderless","e","onValueChange","accessibilityState","selected","styles","content","StyleSheet","create","width","height","margin"],"sourceRoot":"../../src","sources":["ToggleButton.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}