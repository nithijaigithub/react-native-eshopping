{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"style\", \"theme\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getIconButtonColor } from \"./utils\";\nvar PADDING = 8;\nvar IconButton = forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    customContainerColor = _ref.containerColor,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? false : _ref$animated,\n    mode = _ref.mode,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'icon-button' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var _getIconButtonColor = getIconButtonColor({\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      mode: mode,\n      customIconColor: customIconColor,\n      customContainerColor: customContainerColor\n    }),\n    iconColor = _getIconButtonColor.iconColor,\n    rippleColor = _getIconButtonColor.rippleColor,\n    backgroundColor = _getIconButtonColor.backgroundColor,\n    borderColor = _getIconButtonColor.borderColor;\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$borderWidth = _ref2.borderWidth,\n    borderWidth = _ref2$borderWidth === void 0 ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref2$borderWidth,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? buttonSize / 2 : _ref2$borderRadius;\n  var borderStyles = {\n    borderWidth: borderWidth,\n    borderRadius: borderRadius,\n    borderColor: borderColor\n  };\n  return React.createElement(Surface, _extends({\n    ref: ref,\n    testID: testID + \"-container\",\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: [styles.touchable, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    },\n    testID: testID\n  }, rest), React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","forwardRef","CrossFadeIcon","Icon","Surface","TouchableRipple","getIconButtonColor","PADDING","IconButton","ref","icon","_ref","customIconColor","iconColor","customContainerColor","containerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","themeOverrides","theme","testID","rest","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","StyleSheet","flatten","borderWidth","borderRadius","borderStyles","width","height","styles","container","elevation","borderless","centered","touchable","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","color","source","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"sourceRoot":"../../src","sources":["IconButton.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}