{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem\";\nimport { getDisabledSegmentedButtonStyle } from \"./utils\";\nvar SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    buttons = _ref.buttons,\n    multiSelect = _ref.multiSelect,\n    density = _ref.density,\n    style = _ref.style,\n    themeOverrides = _ref.theme;\n  var theme = useInternalTheme(themeOverrides);\n  return React.createElement(View, {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = getDisabledSegmentedButtonStyle({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    var onPress = function onPress(e) {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat(_toConsumableArray(value), [item.value]) : item.value;\n      onValueChange(nextValue);\n    };\n    return React.createElement(SegmentedButtonItem, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle],\n      theme: theme\n    }));\n  }));\n};\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default SegmentedButtons;\nexport { SegmentedButtons };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAW9B,SAASC,gBAAgB;AAEzB,OAAOC,mBAAmB;AAC1B,SAASC,+BAA+B;AAgHxC,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC,MAQZ;EAAA,IAPXC,KAAK,GAOCD,KAPNC,KAAK;IACLC,aAAa,GAMPF,KANNE,aAAa;IACbC,OAAO,GAKDH,KALNG,OAAO;IACPC,WAAW,GAILJ,KAJNI,WAAW;IACXC,OAAO,GAGDL,KAHNK,OAAO;IACPC,KAAK,GAECN,KAFNM,KAAK;IACEC,iBACDP,KADNQ,KAAK;EAEL,IAAMA,KAAK,GAAGZ,gBAAgB,CAACW,cAAc,CAAC;EAE9C,OACEZ,oBAACc,IAAI;IAACH,KAAK,EAAE,CAACI,MAAM,CAACC,GAAG,EAAEL,KAAK;EAAE,GAC9BH,OAAO,CAACS,GAAG,CAAC,UAACC,IAAI,EAAEC,CAAC,EAAK;IACxB,IAAMC,kBAAkB,GAAGjB,+BAA+B,CAAC;MACzDU,KAAK,EAALA,KAAK;MACLL,OAAO,EAAPA,OAAO;MACPa,KAAK,EAAEF;IACT,CAAC,CAAC;IACF,IAAMG,OAAO,GACXH,CAAC,KAAK,CAAC,GAAG,OAAO,GAAGA,CAAC,KAAKX,OAAO,CAACe,MAAM,GAAG,CAAC,GAAG,MAAM,GAAGC,SAAS;IAEnE,IAAMC,OAAO,GACXhB,WAAW,IAAIiB,KAAK,CAACC,OAAO,CAACrB,KAAK,CAAC,GAC/BA,KAAK,CAACsB,QAAQ,CAACV,IAAI,CAACZ,KAAK,CAAC,GAC1BA,KAAK,KAAKY,IAAI,CAACZ,KAAK;IAE1B,IAAMuB,OAAO,GAAIC,SAAXD,OAAO,CAAIC,CAAwB,EAAK;MAAA;MAC5C,qBAAI,CAACD,OAAO,kDAAZE,uBAAI,EAAWD,CAAC,CAAC;MAEjB,IAAME,SAAS,GACbvB,WAAW,IAAIiB,KAAK,CAACC,OAAO,CAACrB,KAAK,CAAC,GAC/BmB,OAAO,GACLnB,KAAK,CAAC2B,MAAM,CAAEC,aAAG;QAAA,OAAKhB,IAAI,CAACZ,KAAK,KAAK4B,GAAG;MAAA,EAAC,gCACrC5B,KAAK,IAAEY,IAAI,CAACZ,KAAK,EAAC,GACxBY,IAAI,CAACZ,KAAK;MAGhBC,aAAa,CAACyB,SAAS,CAAC;IAC1B,CAAC;IAED,OACEhC,oBAACE,mBAAmB,eACdgB,IAAI;MACRiB,GAAG,EAAEhB,CAAE;MACPM,OAAO,EAAEA,OAAQ;MACjBH,OAAO,EAAEA,OAAQ;MACjBZ,OAAO,EAAEA,OAAQ;MACjBmB,OAAO,EAAEA,OAAQ;MACjBlB,KAAK,EAAE,CAACO,IAAI,CAACP,KAAK,EAAES,kBAAkB,CAAE;MACxCP,KAAK,EAAEA;IAAM,GACb;EAEN,CAAC,CAAC,CACG;AAEX,CAAC;AAED,IAAME,MAAM,GAAGqB,UAAU,CAACC,MAAM,CAAC;EAC/BrB,GAAG,EAAE;IACHsB,aAAa,EAAE;EACjB;AACF,CAAC,CAAC;AAEF,eAAelC,gBAAgB;AAG/B,SAASA,gBAAoC","names":["React","useInternalTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","_ref","value","onValueChange","buttons","multiSelect","density","style","themeOverrides","theme","View","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","_item$onPress","nextValue","filter","val","key","StyleSheet","create","flexDirection"],"sourceRoot":"../../src","sources":["SegmentedButtons.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}